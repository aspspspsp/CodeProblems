package LeetCode.Medium;
/*
����Ŀ˵�����Ѿ�˵���ˡ�ֻ֧��һ�ָ�����ı��뷽������
�������ֻ��Ҫ�����������ϣ������ʵ�ֵĸ�������뷽�������ɹ��ɾͿ����ˡ�

�����ȿ�������ͬλ���ĸ����룺
1��n=1ʱ������Ϊ��0��1
2��n=2ʱ������Ϊ��00��01��11��10
3��n=3ʱ������Ϊ��000��001��011��010��110��111��101��100
4��nΪ������Ȼ��ʱ��������һ�����
��0Ϊ��ʼ��ÿ�θ����������ֵ�λ�������Կ������и�������ͼ��Ŷ�����
                    n
                   / \
                 n-1 n-1
                 ... ...
        3       3             3
       / \     / \           / \
      2   2   2   2    ...  2   2
     / \ / \ / \ / \       / \ / \
     1 1 1 1 1 1 1 1       1 1 1 1
������ʵ�ֵ��㷨�ﲢ����Ҫ�õ������������ͼֻ�ǰ�����������㷨�еĵݹ顣
���ǿ�����λ��������׵ػ����Щλ�ڶ������ϵ�Ȩ��weight����
��ʹ���������ʵ��ָ����λ��0��1��1��0��ת����ÿ��ת����������һ���µĸ����롣
����list�м������и����붼��Ҫ��ӵ�����0��Ȼ�������ɳ���Ϊn�ĸ�����

���ɳ���Ϊn�ĸ�������Է�Ϊ����Ĳ��裺
1.�ж�n��ֵ�������0ֱ�ӷ��أ������1ֱ��ִ�е�3���������أ���һ���ǵݹ���ڣ�
2.���ɳ���Ϊn-1�ĸ����룬�����ɵ��������β���list����һ����Ҫ�ݹ���ñ����裩
3.��������nλ����Ϊ1��������ǰ���������2��n-1�η��������������list
4.��֤���������Ϊ1���ٴ����ɳ���n-1�ĸ����룬�����ɵ��������β���list
 ����һ����Ҫ�ݹ���ñ����裩

��Ҫע����ǣ�ÿ�����ɵĸ����룬����������һ�������������
*/

import java.util.ArrayList;
import java.util.List;

public class GrayCode {
    //��ʱ�洢��ǰ����
    int numCur;
    
    //�Y��
    List<Integer> result;
    public List<Integer> grayCode(int n) {
        if(n < 0) {
            return null;
        }
        
        result = new ArrayList<>();
        //�κθ��״a�ĵ�һλ���ֶ���0
        numCur = 0;
        result.add(numCur);
        
        //�ݹ����ɸ��������arrayList
        getGrayCode(n);
        
        return result;
    }
    
    void getGrayCode(int n) {
    	//�ж�n��ֵ�������0ֱ�ӷ���
        if(n == 0) {
            return;
        }
        
        //�����1ֱ��ִ������t�Y������һ���ǵݹ���ڣ�
        if(n == 1) {
        	//��������nλ����Ϊ1��������ǰ�������1�������������list
            numCur = numCur ^ 1;
            result.add(numCur); 
        } else {
        	//���ɳ���Ϊn-1�ĸ����룬�����ɵ��������β���list����һ����Ҫ�ݹ���ñ����裩
            getGrayCode(n - 1);
            //��������nλ����Ϊ1��������ǰ���������2��n-1�η��������������list
            numCur = numCur ^ (1 << (n - 1));
            result.add(numCur);
            //��֤���������Ϊ1���ٴ����ɳ���n-1�ĸ����룬�����ɵ��������β���list
            //����һ����Ҫ�ݹ���ñ����裩
            getGrayCode(n - 1);
        }
    }
}